---
title: "r7"
format: html
editor: visual
---

## R7

Object oriented programming in R

```{r}
library(S7)

# Defining a new class called range
range <- new_class("range",
                   # Define properties/data- similar to init?
                   properties = list(
                     start = class_double,
                     end = class_double
                   ),
                   # Validator to determine whether init are ok
                   validator = function(self){
                     if (length(self@start) != 1){
                       "@start must be length 1"
                     } else if (length(self@end) != 1){
                       "@end must be length 1"
                     }
                     else if (self@start > self@end){
                       "@end must be greater than or equal to @start"
                     }
                   }
                   )
```

Instantiate class

```{r}
x <- range(start = 1, end = 10)
x
```

```{r}
# Accesssing class atrributes
x@end
```

R7 uses functional OOP where methods belong to generic functions and method calls take the form: `generic(object, arg2, arg3)`

```{r}
# Create a generic where methods will belong to
inside <- new_generic(
  name = "inside",
  dispatch_args = "x"
)
```

Once you have a generic, you can provide implementations for specific classes by registering methods with `method<-`

::: callout-note
 methods generally need to ignore arguments that they haven’t been specifically designed to handle, i.e. they need to use `…`
:::

```{r}
# Register a method to generic that will implement
# a function in a class
method(inside, range) <- function(x, y){
  y >= x@start & y<= x@end
}
inside
```

Make a method call: generic(object, args)

```{r}
inside(x, c(0, 5, 10, 15))
```

Define implementations for base types on S7 generics:

```{r}
# Register a method to generic that will implement a 
# method in base class
method(inside, class_numeric) <- function(x, y){
  y >= min(x) & y <= max(x)
}
inside
```

```{r}
# Make a method call
v <- 1:5 # class integer
inside(v, 3:8)
```

You can register methods for R7 classes on s3 and s4 generics

```{r}
# Register a method to mean generic that will implement a mean function to class range
method(mean, range) <- function(x, ...){
  mean(c(x@start, x@end))
  
}
mean(x)
```

```{r}
# Register a print method to print generic that will
# implement printing in class range
method(print, range) <- function(x, ...){
  print(c(x@start, x@end, x@len))
}
x

```

Only ever write a method if you own the generic or the class.

```{r}
# Create new class
dog <- new_class("dog",
                 properties = list(
                   name = class_character,
                   age = class_numeric
                 ))

# Create instance
lola <- dog(name = "Lola", age = 11)
lola
```

```{r}
# Generic for implementing methods for dog class
speak <- new_generic("speak", "x")

# Register a method to the generic that will implement
# a function in class dog
method(speak, dog) <- function(x){
  "Woof"
}
speak
```

```{r}
# Class for cat
# Create new class
cat <- new_class("cat",
                 properties = list(
                   name = class_character,
                   age = class_numeric
                 ))

method(speak, cat) <- function(x){
  "Meow"
}

# Create instance
jessie <- cat(name = "Jessie", age = 6)
speak(jessie)

#
```

```{r}
# Cat and dog share similar attributes hence we could use a common parent class
pet <- new_class("pet",
                 properties = list(
                   name = class_character,
                   age = class_numeric
                 ))

# Create new classes that Inherit properties
dog <- new_class("dog", parent = pet)
cat <- new_class("cat", parent = pet)

# Instantiate class
jessie <- cat(name = "Jessie", age = 8)
lola <- dog(name = "lola", age = 3)
jessie
```

Method dispatch takes advantage of the parent classes, if the method is not defined for a class, it will try method for parent class until it finds a method

```{r}
# Create a generic for parent class
describe <- new_generic("describe", "x")

# Register a method to parent class that will print stuff
method(describe, pet) <- function(x){
  paste0(x@name, " is ", x@age, " years old")
}

# Make a method call
describe(jessie)
```

```{r}
# Register a method for cat class exclusively
method(describe, cat) <- function(x){
  paste0(x@name, " is ", x@age, " years old is a good cat")
}

# Method call on cat
describe(jessie)
```

Default value: great to have defaults

```{r}
# Create class with default values
empty <- new_class("empty",
                   properties = list(
                     x = new_property(class_numeric, default = 0),
                     y = new_property(class_character, default = "")
                     
                   ))
empty()
```

computed properties

```{r}
# Define new class
range <- new_class("range",
                   properties = list(
                     start = class_double,
                     end = class_double,
                     len = new_property(
                       getter = function(self) self@end - self@start
                     )
                   ))

# Instantiate class
x <- range(1, 5)
x
```

Computed properties are read only!

```{r}
x@len <- 4
```

One can make a computed property fully dynamic i.e read and write by also supplying a setter

```{r}
# Define new class with dynamic property
range <- new_class("range",
                   properties = list(
                     start = class_double,
                     end = class_double,
                     len = new_property(
                       getter = function(self) -self@start + self@end,
                       setter = function(self, value){
                         self@end = self@start + value
                         self
                       }
                     )
                   ))

x <- range(start = 1, end = 10)
x
```

```{r}
# Modify length and returns a new object
x@len <- 3
x
```

**A setter returns a modified object**
