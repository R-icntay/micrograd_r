---
title: "micrograd"
format: html
editor: visual
---

## Building micrograd

```{r}
library(S7)
library(magrittr)
library(here)
library(DiagrammeR)
library(tidyverse)

```

### Create class, instantiate and register print method

**methods belong to generic functions, and method calls look like:**

`generic(object, arg2, arg3)`

Create a class `Value` that holds our data and prints it

```{r}
# Create a class Value that takes in data and prints it
Value <- new_class(
  name = "Value",
  properties = list(
    inp_data = class_numeric
  )
)

# Register a method to print generic that implements print function to Value class
method(print, Value) <- function(x, ...){
  # Implement print function
  cat("Value(data=", x@inp_data, ")", sep = "")
}

# Instantiate a Value object with value of 2
a <- Value(2.0)

# Instantiate a Value object with value of -3
b <- Value(-3.0)

# Instantiate a Value object with value of 10
c <- Value(10)

a;b;c
```

What if we want to add two value objects?

### Add mathematical operations

```{r}
# Try addition
a + b
```

Can't find method for generic, so we need to register a method in generic that will implement mathematical operations for class Value.

Luckily, we can register a method for an S4/S3 generic with an S7 class.

```{r}
# Register an add method in + generic that will perform addition operation
method(`+`, list(Value, NULL)) <- function(e1, e2){
  # Perform add operation
  `+`(e1@inp_data, e2@inp_data)
}

# Method call
a + b
```

Bingo! Now, let's modify that abit to return a value object

```{r}
# Register an add method in + generic that will perform addition operation
method(`+`, list(Value, NULL)) <- function(e1, e2){
  # Perform add operation
  val = e1@inp_data + e2@inp_data
  Value(inp_data = val)
}

# Method call
a + b
```

Now let's do the same for multiply

```{r}
# Register a method to generic `*` that will implement
# multiplication in Value class
method(`*`, list(Value, NULL)) <- function(e1, e2){
  # Perform multiplication
  val = e1@inp_data * e2@inp_data
  Value(inp_data = val)
}

# Call method
d = a*b + c
d
```

Now, to keep the expression graphs of an operation, we need to keep info of what resulted to a particular operation. We'll store them in a variable called `_children()`

```{r}
# Keep track of what operation produced a result
Value <- new_class(
  name = "Value",
  properties = list(
    inp_data = class_numeric,
    prev = class_vector
    #children = new_property(default = c())
    
  )
  )

# Register an add method in + generic that will perform addition operation
method(`+`, list(Value, NULL)) <- function(e1, e2){
  # Perform add operation
  val = e1@inp_data + e2@inp_data
  Value(inp_data = val, prev = c(e1, e2))
}

method(`*`, list(Value, NULL)) <- function(e1, e2){
  # Perform product operation
  val = e1@inp_data * e2@inp_data
  Value(inp_data = val, prev = c(e1, e2))
}

# Instantiate object
a <- Value(2.0)
b <- Value(-3.0)
c <- Value(10.0)
d <- a*b + c
d

```

```{r}
d@prev
```

Now, we also need to know what operation produced the result

```{r}
# Keep track of what operation produced a result
Value <- new_class(
  name = "Value",
  properties = list(
    inp_data = class_numeric,
    prev = class_vector,
    op = new_property(default = NA),
    label = new_property(class = class_character, default = "")
    
    
  )
  )

# Register an add method in + generic that will perform addition operation
method(`+`, list(Value, NULL)) <- function(e1, e2){
  # Perform add operation
  val = e1@inp_data + e2@inp_data
  Value(inp_data = val, prev = c(e1, e2), op = "+")
}

method(`*`, list(Value, NULL)) <- function(e1, e2){
  # Perform product operation
  val = e1@inp_data * e2@inp_data
  Value(inp_data = val, prev = c(e1, e2), op = "*")
}

# Register a method to == generic that implements
# equality comparison for Value class
method(`==`, list(Value, NULL)) <- function(e1, e2){
  e1@inp_data == e2@inp_data && e1@label == e2@label
}

# Instantiate object
a <- Value(inp_data = 2.0, label = "a")
b <- Value(inp_data = -3.0, label = "b")
c <- Value(inp_data = 10.0, label = "c")
e <- a*b
e@label = "e"
d <- e + c
d@label = "d"
```

```{r}
d@inp_data
d@prev
d@op
d@label
```

```{r}
#Ops.Value = function(e1, e2){
#  get(.Generic)(e1@inp_data, e2@inp_data)}
```

```{r}
library(purrr)
trace <- function(root){
  nodes = list()
  edges = list()
  build <- function(v){
    if (length(nodes) > 0){
      if (!any(map_lgl(1:length(nodes), \(x) v ==
                       pluck(nodes, x)))){
        nodes <<- c(nodes, v)}
    } else {
      nodes <<- c(nodes, v)
    }
    
    for (child in v@prev){
      if (length(edges) > 0){
        edges <<- c(edges, list(list(child, v)))
      } else {
        edges <<- list(list(child, v))
      }
      build(child)
    }
  }
  
  
  
  
  build(root)
  return(list(nodes = nodes, edges = edges))
  
  
}


nodes_edges = trace(d)
```




```{r}

nodes = c()
edges = list()
len_nodes = length(nodes)
if (len_nodes > 0){
  if (!any(map_lgl(1:length(nodes), \(x) v ==
                   pluck(nodes, x)))){
    nodes <- c(nodes, v)}
} else {
  nodes <- c(nodes, v)
}
```

```{r}
v = d
edges = list()
print(length(edges))
for (child in v@prev){
  if (length(edges) > 0){
    edges <<- c(edges, list(list(child, v)))
  } else {
    edges <<- list(list(child, v))
  }
  #build(child)
  
}

edges
```

```{r}
replacer <- function(ref_vec, x){
  ## Function that finds idx match and replaces label
  ref_vec <<- ref_vec
  idx = match(x, ref_vec)
  ref_vec = ref_vec
  ref_vec[idx] <<- paste0(ref_vec[idx], "_")
  return(idx)
  }
```


## Build graph
```{r}
graph <- create_graph()
nodes <-  nodes_edges %>% 
  pluck("nodes")


edges <- nodes_edges %>%
  pluck("edges")

replacer <- function(x, ref_vec){
  ## Function that finds idx match in ref_vec and replaces label
  idx = c()
  for (i in 1:length(x)){
    idx = c(idx, match(x[i], ref_vec))
    ref_vec[idx] = paste0(ref_vec[idx], "_")
  }
  return(idx)
  }

n <-  length(nodes)
label <-  map_chr(1:n, \(x) pluck(nodes, x)@label)
label_data <-  map_dbl(1:n, \(x) pluck(nodes, x)@inp_data)
label_data <- map2_chr(label, label_data, \(x, y) paste(x, "|", "data", format(y, nsmall = 4)))
op = map_chr(1:n, \(x) pluck(nodes, x)@op)
label_op = op[!is.na(op)]
shape = rep("rectangle", n)
shape_op = rep("ellipse", length(label_op))

# Total labels
total_labels <-  c(label, label_op)
label_data <- c(label_data, label_op)


# Create all nodes
ndf <- create_node_df(n = length(total_labels),
                      label = label_data,
                      shape = c(shape, shape_op),
                      width = 1.2,
                      #height = 0.3,
                      #fontsize = 13,
                      color = "midnightblue",
                      fillcolor = "white",
                      fixed_size = FALSE,)

# Add op nodes
edf <- create_edge_df(
  #from = match(label_op, total_labels),
  from = replacer(label_op, total_labels),
  to = match(label[!is.na(op)], total_labels),
  color = "midnightblue",
  rel = "leading_to"
)



# Create graph
graph <- create_graph(nodes_df = ndf,
                      edges_df = edf,
                      attr_theme = "lr"
                      )

# Connect child nodes to op nodes
child2op <- function(edges, total_labels, graph){
  for (edge in edges){
    from = match(pluck(edge, 1)@label, total_labels)
    to = replacer(pluck(edge, 2)@op, total_labels)
    graph <- add_edge(graph,
                      from = from,
                      to = to,
                      rel = "",
                      edge_aes(color = "midnightblue")
    )
    
    total_labels[to] = paste0(total_labels[to], "_")
  }
  return(graph)
}
  
# for (edge in edges){
#   graph <- add_edge(graph,
#                      from = match(pluck(edge, 1)@label, total_labels),
#                      to = replacer(pluck(edge, 2)@op, total_labels),
#                      rel = "",
#                     edge_aes(color = "midnightblue")
# 
#   )
# }
graph <- child2op(edges, total_labels, graph)
render_graph(graph)
```

## Manual backpropagation

Backpropagation is essentially calculating the derivative of a value (typically loss) with respect to all the parameters in the network. This tells us how much the loss would change if each parameter would be bumped up a bit. The next step is usually adjusting the parameters in the direction that reduces the loss.

Derivative of a function $f$ at point $a$ is defined as the limit of the average rate of change of $f$ in the interval $[a, a + h]$ as $h$ approaches $0$. This is given by the formula:

$$
f'(a) = \lim_{h \to 0} \frac{f(a + h) - f(a)}{h}
$$

So let's update our derivatives manually at this point

```{r}
# Keep track of what operation produced a result
Value <- new_class(
  name = "Value",
  properties = list(
    inp_data = class_numeric,
    prev = class_vector,
    op = new_property(default = NA),
    label = new_property(class = class_character, default = "")
    
    
  )
  )

# Register an add method in + generic that will perform addition operation
method(`+`, list(Value, NULL)) <- function(e1, e2){
  # Perform add operation
  val = e1@inp_data + e2@inp_data
  Value(inp_data = val, prev = c(e1, e2), op = "+")
}

method(`*`, list(Value, NULL)) <- function(e1, e2){
  # Perform product operation
  val = e1@inp_data * e2@inp_data
  Value(inp_data = val, prev = c(e1, e2), op = "*")
}

# Register a method to == generic that implements
# equality comparison for Value class
method(`==`, list(Value, NULL)) <- function(e1, e2){
  e1@inp_data == e2@inp_data && e1@label == e2@label
}

# Instantiate object
a <- Value(inp_data = 2.0, label = "a")
b <- Value(inp_data = -3.0, label = "b")
c <- Value(inp_data = 10.0, label = "c")
e <- a*b
e@label = "e"
d <- e + c
d@label = "d"
f <- Value(inp_data = -2, label = "f")
L <- d * f
L@label = "L"

# Create nodes and edges
nodes_edges = trace(L)
```

```{r}
replacer <- function(label, x){
  idx = match(x, label)
  label[idx] <<- "xx"
  return(idx)}
map_dbl(label_op, \(x) replacer(label, x))
```

```{r}
```
```{r}
draw_dot <- function(root){
  nodes_edges <- trace(root)
  nodes <-  nodes_edges %>% 
    pluck("nodes")
  
  
  edges <- nodes_edges %>%
    pluck("edges")
  
  graph = create_graph(attr_theme = "lr")
  for(i in 1:length(nodes)){
    n = pluck(nodes, i)
    
    graph = add_node(
      graph,
      label = paste(n@label, "|", "data", format(n@inp_data, nsmall = 4)),
      node_aes = node_aes(
        shape = "rectangle",
        width = 1.2,
        color = "midnightblue",
        fillcolor = "white",
        #fixed_size = FALSE,
        
      ))
      # Add elliptical op nodes if node has op
      if (!is.na(n@op)){
        graph = add_node(
          graph,
          label = paste(n@op, "_", n@label),
          node_aes = node_aes(
            shape = "ellipse",
            width = 1.2,
            color = "midnightblue",
            fillcolor = "white",
            #fixed_size = FALSE,
            
          ))
      }
  }
  
  for (edge in edges){
    graph <- add_edge(graph,
                     from = match(pluck(edge, 1)@label, label),
                     to = match(pluck(edge, 2)@label, label),
                     rel = "",
                     edge_aes(color = "midnightblue")
    )
  }
  render_graph(graph)
}

draw_dot(L)
```

```{r}
```




```{r}  


draw_dot <- function(root){
  
  nodes_edges <- trace(root)
  nodes <-  nodes_edges %>% 
  pluck("nodes")
  
  
  edges <- nodes_edges %>%
  pluck("edges")
  
  graph = create_graph(attr_theme = "lr")
  for(i in 1:length(nodes)){
  n = pluck(nodes, i)
  
  graph = add_node(
    graph,
    label = paste(n@label, "|", "data", format(n@inp_data, nsmall = 4)),
    node_aes = node_aes(
      shape = "rectangle",
      width = 1.2,
      color = "midnightblue",
      fillcolor = "white",
      #fixed_size = FALSE,
      
    ))
    # Add elliptical op nodes if node has op
    if (!is.na(n@op)){
      graph = add_node(
        graph,
        label = paste(n@op, "_", n@label),
        node_aes = node_aes(
          shape = "ellipse",
          width = 1.2,
          color = "midnightblue",
          fillcolor = "white",
          #fixed_size = FALSE,
  
        ),
        type = paste(n@op),
        # edge_data = edge_data(
        #   index = c(i, i+1)
        #)
      )
      
      # Connect op node to parent node
      graph = add_edge(
        graph,
        from = paste(n@op, "_", n@label),
        to = paste(n@label, "|", "data", format(n@inp_data, nsmall = 4)),
        rel = paste(n@op),
        edge_aes = edge_aes(color = "midnightblue")
      )
    }
  
  
  
  }
  
  ## Connect child nodes to op nodes
  for (edge in edges){
  graph = add_edge(
    graph,
    from = paste(pluck(edge, 1)@label, "|", "data", format(pluck(edge, 1)@inp_data, nsmall = 4)),
    to = paste(pluck(edge, 2)@op, "_", pluck(edge, 2)@label),
    edge_aes = edge_aes(color = "midnightblue"),
    rel = paste(pluck(edge, 2)@op)
  )
  
  }
  
  # Set node attributes to display
  graph <- graph %>% 
  set_node_attr_to_display(attr = label, default = "label")
  
  graph[["nodes_df"]] <- graph[["nodes_df"]] %>%
  mutate(display = case_when(shape == "ellipse" ~ "type",
                             .default = display))
  
  
  # Render graph
  render_graph(graph)
  
}

# Draw graph
draw_dot(L)
```

```{r}


```





```{r}
# Save graph
graph %>% 
  export_graph("graph.png")
  
```



