---
title: "micrograd"
format: html
editor: visual
---

## Building micrograd

```{r}
library(S7)
library(magrittr)
library(here)
```

### Create class, instantiate and register print method

**methods belong to generic functions, and method calls look like:**

`generic(object, arg2, arg3)`

Create a class `Value` that holds our data and prints it

```{r}
# Create a class Value that takes in data and prints it
Value <- new_class(
  name = "Value",
  properties = list(
    inp_data = class_numeric
  )
)

# Register a method to print generic that implements print function to Value class
method(print, Value) <- function(x, ...){
  # Implement print function
  cat("Value(data=", x@inp_data, ")", sep = "")
}

# Instantiate a Value object with value of 2
a <- Value(2.0)

# Instantiate a Value object with value of -3
b <- Value(-3.0)

# Instantiate a Value object with value of 10
c <- Value(10)

a;b;c
```

What if we want to add two value objects?

### Add mathematical operations

```{r}
# Try addition
a + b
```

Can't find method for generic, so we need to register a method in generic that will implement mathematical operations for class Value.

Luckily, we can register a method for an S4/S3 generic with an S7 class.

```{r}
# Register an add method in + generic that will perform addition operation
method(`+`, list(Value, NULL)) <- function(e1, e2){
  # Perform add operation
  `+`(e1@inp_data, e2@inp_data)
}

# Method call
a + b
```

Bingo! Now, let's modify that abit to return a value object

```{r}
# Register an add method in + generic that will perform addition operation
method(`+`, list(Value, NULL)) <- function(e1, e2){
  # Perform add operation
  val = e1@inp_data + e2@inp_data
  Value(inp_data = val)
}

# Method call
a + b
```

Now let's do the same for multiply

```{r}
# Register a method to generic `*` that will implement
# multiplication in Value class
method(`*`, list(Value, NULL)) <- function(e1, e2){
  # Perform multiplication
  val = e1@inp_data * e2@inp_data
  Value(inp_data = val)
}

# Call method
d = a*b + c
d
```

Now, to keep the expression graphs of an operation, we need to keep info of what resulted to a particular operation. We'll store them in a variable called `_children()`

```{r}
# Keep track of what operation produced a result
Value <- new_class(
  name = "Value",
  properties = list(
    inp_data = class_numeric,
    prev = class_vector
    #children = new_property(default = c())
    
  )
  )

# Register an add method in + generic that will perform addition operation
method(`+`, list(Value, NULL)) <- function(e1, e2){
  # Perform add operation
  val = e1@inp_data + e2@inp_data
  Value(inp_data = val, prev = c(e1, e2))
}

method(`*`, list(Value, NULL)) <- function(e1, e2){
  # Perform product operation
  val = e1@inp_data * e2@inp_data
  Value(inp_data = val, prev = c(e1, e2))
}

# Instantiate object
a <- Value(2.0)
b <- Value(-3.0)
c <- Value(10.0)
d <- a*b + c
d

```

```{r}
d@prev
```

Now, we also need to know what operation produced the result

```{r}
# Keep track of what operation produced a result
Value <- new_class(
  name = "Value",
  properties = list(
    inp_data = class_numeric,
    prev = class_vector,
    op = new_property(default = NA),
    label = class_character
    
    
  )
  )

# Register an add method in + generic that will perform addition operation
method(`+`, list(Value, NULL)) <- function(e1, e2){
  # Perform add operation
  val = e1@inp_data + e2@inp_data
  Value(inp_data = val, prev = c(e1, e2), op = "+")
}

method(`*`, list(Value, NULL)) <- function(e1, e2){
  # Perform product operation
  val = e1@inp_data * e2@inp_data
  Value(inp_data = val, prev = c(e1, e2), op = "*")
}

# Register a method to == generic that implements
# equality comparison for Value class
method(`==`, list(Value, NULL)) <- function(e1, e2){
  e1@inp_data == e2@inp_data && e1@label == e2@label
}

# Instantiate object
a <- Value(inp_data = 2.0, label = "a")
b <- Value(inp_data = -3.0, label = "b")
c <- Value(inp_data = 10.0, label = "c")
e <- a*b
e@label = "e"
d <- e + c
d@label = "d"
```

```{r}
d@inp_data
d@prev
d@op
d@label
```

```{r}
#Ops.Value = function(e1, e2){
#  get(.Generic)(e1@inp_data, e2@inp_data)}
```

```{r}
library(purrr)
trace <- function(root){
  nodes = list()
  edges = list()
  build <- function(v){
    if (length(nodes) > 0){
      if (!any(map_lgl(1:length(nodes), \(x) v ==
                       pluck(nodes, x)))){
        nodes <<- c(nodes, v)}
    } else {
      nodes <<- c(nodes, v)
    }
    
    for (child in v@prev){
      if (length(edges) > 0){
        edges <<- c(edges, list(list(child, v)))
      } else {
        edges <<- list(list(child, v))
      }
      build(child)
    }
  }
  
  
  
  
  build(root)
  return(list(nodes = nodes, edges = edges))
  
  
}


nodes_edges = trace(d)
```


```{r}
library(DiagrammeR)
graph <- create_graph()
ndf <- create_node_df(n = 4)
graph <-
  create_graph(
    nodes_df = ndf)
graph

```




```{r}
if (d@op){
  print("yes")
} else {
  print("no")
}

```






```{r}

nodes = c()
edges = list()
len_nodes = length(nodes)
if (len_nodes > 0){
  if (!any(map_lgl(1:length(nodes), \(x) v ==
                   pluck(nodes, x)))){
    nodes <- c(nodes, v)}
} else {
  nodes <- c(nodes, v)
}
```

```{r}
v = d
edges = list()
print(length(edges))
for (child in v@prev){
  if (length(edges) > 0){
    edges <<- c(edges, list(list(child, v)))
  } else {
    edges <<- list(list(child, v))
  }
  #build(child)
  
}

edges
```

## Build graph
```{r}
graph <- create_graph()
nodes <-  nodes_edges %>% 
  pluck("nodes")


edges <- nodes_edges %>%
  pluck("edges")

n <-  length(nodes)
label <-  map_chr(1:n, \(x) pluck(nodes, x)@label)
label_data <-  map_dbl(1:n, \(x) pluck(nodes, x)@inp_data)
label <- map2_chr(label, label_data, \(x, y) paste(x, "|", "data", format(y, nsmall = 4)))
op = map_chr(1:n, \(x) pluck(nodes, x)@op)
label_op = op[!is.na(op)]
shape = rep("rectangle", n)
shape_op = rep("ellipse", length(label_op))

# Total labels
total_labels <-  c(label, label_op)


# Create all nodes
ndf <- create_node_df(n = length(total_labels),
                      label = total_labels,
                      shape = c(shape, shape_op),
                      width = 1.2,
                      #height = 0.3,
                      #fontsize = 13,
                      color = "midnightblue",
                      fillcolor = "white",
                      fixed_size = FALSE,)

# Add op nodes
edf <- create_edge_df(
  from = match(label_op, total_labels),
  to = match(label[!is.na(op)], total_labels),
  color = "midnightblue",
  rel = "leading_to"
)

# Create graph
graph <- create_graph(nodes_df = ndf,
                      edges_df = edf,
                      attr_theme = "lr"
                      )

# Connect child nodes to op nodes
for (edge in edges){
  graph <- add_edge(graph,
                     from = match(pluck(edge, 1)@label, map_chr(total_labels, \(x) strsplit(x, "|") %>% unlist() %>% trimws() %>% pluck(1))),
                     to = match(pluck(edge, 2)@op, map_chr(total_labels, \(x) strsplit(x, "|") %>% unlist() %>% trimws() %>% pluck(1))),
                     rel = "",
                    edge_aes(color = "midnightblue")

  )
}
render_graph(graph)
```

```{r}
# Save graph
graph %>% 
  export_graph("graph.png")
  
```



